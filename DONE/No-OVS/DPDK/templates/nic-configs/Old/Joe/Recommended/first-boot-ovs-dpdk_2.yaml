heat_template_version: 2014-10-16

parameters:
  ComputeKernelArgs:
    description: >
      Space seprated list of Kernel args to be update to grub.
      The given args will be appended to existing args of GRUB_CMDLINE_LINUX in file /etc/default/grub
      Example: "intel_iommu=on default_hugepagesz=1GB hugepagesz=1G hugepages=1"
    type: string
    default: ""
  NeutronDpdkSocketMemory:
    description: Memory allocated for each socket
    default: ""
    type: string
  NeutronVhostuserSocketDir:
    description: The vhost-user socket directory for OVS.
    default: ""
    type: string
  HostCpusNumber:
    description: >
      Input a comma separated string with the number of CPUs to be reserved per socket for Host OS
    type: string
    default: "4,4"
  PmdCoresNumber:
    description: >
      Input a comma separated string with the number of CPUs to be reserved for PMD and VNICs
    type: string
    default: "2,4"

resources:
  userdata:
    type: OS::Heat::MultipartMime
    properties:
      parts:
      - config: {get_resource: wipe_disk}
      - config: {get_resource: generate_parameters}
      - config: {get_resource: set_ovs_config}
      - config: {get_resource: set_dpdk_params}
      - config: {get_resource: install_tuned}
      - config: {get_resource: compute_kernel_args}

  generate_parameters:
    type: OS::Heat::SoftwareConfig
    properties:
      config:
        str_replace:
          template: |
            #!/bin/python

            import subprocess
            import socket
            import yaml
            import math
            import sys
            import ConfigParser
            import os.path

            def hyphen_range(s):
                """ Takes a range in form of "a-b" and generate a list of numbers between a and b inclusive.
                Also accepts comma separated ranges like "a-b,c-d,f" will build a list which will include
                Numbers from a to b, a to d and f"""
                s="".join(s.split())#removes white space
                r=set()
                for x in s.split(','):
                    t=x.split('-')
                    if len(t) not in [1,2]: raise SyntaxError("hash_range is given its arguement as "+s+" which seems not correctly formated.")
                    r.add(int(t[0])) if len(t)==1 else r.update(set(range(int(t[0]),int(t[1])+1)))
                l=list(r)
                l.sort()
                for i in range(len(l)):
                    l[i] = str(l[i])
                return l

            if __name__ == '__main__':
                Config = ConfigParser.ConfigParser()
                HOSTCPUS_NUMA = '$HOSTCPUS'.split(',')
                PMDCPUS = '$PMD_CPUS'.split(',')
                #VNICS_NUMA = '$VNICS'.split(',')
                #DPDK_INTERFACES = '$DPDK_INT'.split(',')
                for i in range(len(HOSTCPUS_NUMA)):
                    HOSTCPUS_NUMA[i] = int(HOSTCPUS_NUMA[i])
                    PMDCPUS[i] = int(PMDCPUS[i])
                    #VNICS_NUMA[i] = int(VNICS_NUMA[i])
                    #DPDK_INTERFACES[i] = int(DPDK_INTERFACES[i])
                if 'compute' in socket.gethostname():
                    pass
                else:
                    exit()
                out = subprocess.Popen(
                        "/usr/bin/lscpu | /usr/bin/grep NUMA",
                        shell=True, stdout=subprocess.PIPE).stdout.readlines()
                with open("/root/numa_out", 'w') as f:
                    f.write(out[0])
                numa_nodes_cpu = []
                numa_nodes = int(str(out[0]).split(':')[1]) 
                for i in range(numa_nodes):  
                    cpu_string = str(out[i+1].split(':')[1]).replace(" ","")
                    cpu_string = hyphen_range(cpu_string)
                    numa_nodes_cpu.append(cpu_string) 
                sibling_sets_list = []

                for i in range(len(numa_nodes_cpu)):
                    sibling_sets = []
                    while len(numa_nodes_cpu[i]) != 0:
                        cpu_thread_cmd = '/sys/devices/system/cpu/cpu' \
                                         + numa_nodes_cpu[i][0] \
                                         + '/topology/thread_siblings_list'
                        inf = open(cpu_thread_cmd,'r').read().rstrip()
                        sibling_set = (inf.split(',')[0],inf.split(',')[1])
                        numa_nodes_cpu[i].remove(sibling_set[0])
                        numa_nodes_cpu[i].remove(sibling_set[1])
                        sibling_sets.append(sibling_set)
                    sibling_sets_list.append(sibling_sets)
                ovs_lcore_cpus = []
                vm_cpus = []
                pmd_cpus = []

                #HOST RULES: 
                #First two physical of both sockets
                for i in range(int(math.ceil(int(HOSTCPUS_NUMA[0])/2.0))):
                    ovs_lcore_cpus.append(sibling_sets_list[0][0])
                    del sibling_sets_list[0][0]

                for i in range(int(math.ceil(int(HOSTCPUS_NUMA[1])/2.0))):
                    ovs_lcore_cpus.append(sibling_sets_list[1][0])
                    del sibling_sets_list[1][0]

                for i in range(int(math.ceil(int(PMDCPUS[0])/2.0))):
                    pmd_cpus.append(sibling_sets_list[0][0])
                    del sibling_sets_list[0][0]

                for i in range(int(math.ceil(int(PMDCPUS[1])/2.0))):
                    pmd_cpus.append(sibling_sets_list[1][0])
                    del sibling_sets_list[1][0]

                for l in sibling_sets_list:
                    vm_cpus += l
                ovs_lcore_list = []
                for l in ovs_lcore_cpus:
                    ovs_lcore_list += list(l)
                ovs_lcore_list = ",".join(ovs_lcore_list)    

                pmd_list = []
                for l in pmd_cpus:
                    pmd_list += list(l)
                pmd_list = ",".join(pmd_list)

                vm_list = []
                for l in vm_cpus:
                    vm_list += list(l)
                vm_list = ",".join(vm_list)    
                    
                mem_cmd = "dmidecode -t memory | grep Size | grep -v Module"
                out = subprocess.Popen(mem_cmd,shell=True,
                          stdout=subprocess.PIPE).stdout.readlines()
                memory = 0
                for line in out:
                    memory += int(line.rstrip().split(': ')[1].split('MB')[0])
                    
                memory = (memory/1024) - 12 
                with open("/root/parameters.ini", 'w') as f:
                    Config.set('DEFAULT', 'HostCPUs', ovs_lcore_list)
                    Config.set('DEFAULT', 'PMDCPUs', pmd_list)
                    Config.set('DEFAULT', 'NovaCPUs', vm_list)
                    Config.set('DEFAULT', 'IsolCPUs', pmd_list+','+vm_list)
                    Config.write(f)
                #print "Memory: %s" % memory
                #print "Host CPUs: %s" % ovs_lcore_list
                #print "PMD CPUs: %s" % pmd_list
                #print "Nova CPUs: %s" % vm_list
            
          params:
            $HOSTCPUS: {get_param: HostCpusNumber}
            $PMD_CPUS: {get_param: PmdCoresNumber}
    
  wipe_disk:
    type: OS::Heat::SoftwareConfig
    properties:
      config: |
        #!/bin/bash
        if [[ $HOSTNAME =~ "cephstorage" ]]; then
        {
          # LVM partitions are always in use by the kernel.  Destroy all of the
          # LVM components here so the disks are not in use and sgdisk and
          # partprobe can do their thing

          # Destroy all the logical volumes and volume groups
          vgs --noheadings -o vg_name | awk '{print $1}' | while read lvg;
          do
              cmd="lvremove -f $lvg"
              echo $cmd
              $cmd

              cmd="vgremove -f $lvg"
              echo $cmd
              $cmd
          done

          # Destroy all the physical volumes
          pvs --noheadings -o pv_name | awk '{print $1}' | while read pv;
          do
              cmd="pvremove -ff $pv"
              echo $cmd
              $cmd
          done

          lsblk -dno NAME,TYPE | \
          while read disk type; do
            # Skip if the device type isn't "disk" or if it's mounted
            [ "${type}" == "disk" ] || continue
            device="/dev/${disk}"
            if grep -q ^${device}[1-9] /proc/mounts; then
              echo "Skipping ${device} because it's mounted"
              continue
            fi

            # Delete all of the partitions on the disk
            partitions=$(parted -sm $device print|tail -n +3|awk -F: '{print $1}')
            for partition in $partitions; do
                cmd="parted -s $device rm $partition"
                echo $cmd
                $cmd
            done

            # In case the disk has a non-gpt partition type, convert it to gpt
            cmd="parted -s $device mklabel gpt"
            echo $cmd
            $cmd

            # Zap the disk for good measure
            cmd="sgdisk -Z $device"
            echo $cmd
            $cmd

            echo "Partitioning disk: ${disk}"
            cmd="sgdisk -og ${device}"
            echo $cmd
            $cmd
            echo
          done
          partprobe
          parted -lm
        } > /root/wipe-disk.txt 2>&1
        fi


  set_ovs_config:
    type: OS::Heat::SoftwareConfig
    properties:
      config: |
        #!/bin/bash
        set -x
        if [[ $HOSTNAME =~ "compute" ]] ; then 
          if [ -f /usr/lib/systemd/system/openvswitch-nonetwork.service ]; then
            ovs_service_path="/usr/lib/systemd/system/openvswitch-nonetwork.service"
          elif [ -f /usr/lib/systemd/system/ovs-vswitchd.service ]; then
            ovs_service_path="/usr/lib/systemd/system/ovs-vswitchd.service"
          fi
          grep -q "RuntimeDirectoryMode=.*" $ovs_service_path
          if [ "$?" -eq 0 ]; then
            sed -i 's/RuntimeDirectoryMode=.*/RuntimeDirectoryMode=0775/' $ovs_service_path
          else
            echo "RuntimeDirectoryMode=0775" >> $ovs_service_path
          fi
          grep -Fxq "Group=qemu" $ovs_service_path
          if [ ! "$?" -eq 0 ]; then
            echo "Group=qemu" >> $ovs_service_path
          fi
          grep -Fxq "UMask=0002" $ovs_service_path
          if [ ! "$?" -eq 0 ]; then
            echo "UMask=0002" >> $ovs_service_path
          fi
          ovs_ctl_path='/usr/share/openvswitch/scripts/ovs-ctl'
          grep -q "umask 0002 \&\& start_daemon \"\$OVS_VSWITCHD_PRIORITY\"" $ovs_ctl_path
          if [ ! "$?" -eq 0 ]; then
            sed -i 's/start_daemon \"\$OVS_VSWITCHD_PRIORITY.*/umask 0002 \&\& start_daemon \"$OVS_VSWITCHD_PRIORITY\" \"$OVS_VSWITCHD_WRAPPER\" \"$@\"/' $ovs_ctl_path
          fi
        fi


  # Verify the logs on /var/log/cloud-init.log on the overcloud node
  set_dpdk_params:
    type: OS::Heat::SoftwareConfig
    properties:
      config:
        str_replace:
          template: |
            #!/bin/bash
            set -x
            get_mask()
            {
              local list=$1
              local mask=0
              declare -a bm
              max_idx=0
              for core in $(echo $list | sed 's/,/ /g')
              do
                  index=$(($core/32))
                  bm[$index]=0
                  if [ $max_idx -lt $index ]; then
                     max_idx=$(($index))
                  fi
              done
              for ((i=$max_idx;i>=0;i--));
              do
                  bm[$i]=0
              done
              for core in $(echo $list | sed 's/,/ /g')
              do
                  index=$(($core/32))
                  temp=$((1<<$(($core % 32))))
                  bm[$index]=$((${bm[$index]} | $temp))
              done

              printf -v mask "%x" "${bm[$max_idx]}"
              for ((i=$max_idx-1;i>=0;i--));
              do
                  printf -v hex "%08x" "${bm[$i]}"
                  mask+=$hex
              done
              printf "%s" "$mask"
            }

            if [[ $HOSTNAME =~ "compute" ]] ; then
              PMD_CORES=$(crudini --get /root/parameters.ini DEFAULT pmdcpus)
              LCORE_LIST=$(crudini --get /root/parameters.ini DEFAULT hostcpus)
              pmd_cpu_mask=$( get_mask $PMD_CORES )
              host_cpu_mask=$( get_mask $LCORE_LIST )
              socket_mem=$(echo $SOCKET_MEMORY | sed s/\'//g )
              ovs-vsctl --no-wait set Open_vSwitch . other_config:dpdk-init=true
              ovs-vsctl --no-wait set Open_vSwitch . other_config:dpdk-socket-mem=$socket_mem
              ovs-vsctl --no-wait set Open_vSwitch . other_config:pmd-cpu-mask=$pmd_cpu_mask
              ovs-vsctl --no-wait set Open_vSwitch . other_config:dpdk-lcore-mask=$host_cpu_mask
            fi
          params:
            $SOCKET_MEMORY: {get_param: NeutronDpdkSocketMemory}

  install_tuned:
    type: OS::Heat::SoftwareConfig
    properties:
      config: |
          #!/bin/bash
          set -x
          if [[ $HOSTNAME =~ "compute" ]] ; then
            tuned_conf_path="/etc/tuned/cpu-partitioning-variables.conf"
            TUNED_CORES=$(crudini --get /root/parameters.ini DEFAULT isolcpus)
            if [ -n "$TUNED_CORES" ]; then
              grep -q "^isolated_cores" $tuned_conf_path
              if [ "$?" -eq 0 ]; then
                sed -i 's/^isolated_cores=.*/isolated_cores=$TUNED_CORES/' $tuned_conf_path
              else
                echo "isolated_cores=$TUNED_CORES" >> $tuned_conf_path
              fi
              tuned-adm profile cpu-partitioning
            fi
          fi

  compute_kernel_args:
    type: OS::Heat::SoftwareConfig
    properties:
      config:
        str_replace:
          template: |
            #!/bin/bash
            set -x
            echo $(date) > compute_kernel_args.txt
            if [[ $HOSTNAME =~ "compute" ]] ; then
              sed 's/^\(GRUB_CMDLINE_LINUX=".*\)"/\1 $KERNEL_ARGS"/g' -i /etc/default/grub ;
              grub2-mkconfig -o /etc/grub2.cfg
              reboot
            fi
          params:
            $KERNEL_ARGS: {get_param: ComputeKernelArgs}

outputs:
  OS::stack_id:
    value: {get_resource: userdata}
